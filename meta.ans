S" shim.ans" included   hex

: stack
  depth dup
  begin ?dup while  rot push  1-  repeat
  begin ?dup while  pop dup .  swap 1-  repeat ;
: (stack)   ." ( " stack ." ) " ;

( shim )

variable catcher

: catch   catcher @ push   rp@ catcher !   execute
  pop catcher !   false ;
: throw   catcher @ rp!   pop catcher !   true ;

: clip ( a n m -- a+m n-m )   tuck - tor + swap ;

variable newline   false newline !

: accept ( a n -- m )
  newline @ if
    drop   0A swap !   false newline !   1 exit   then
  source >in @ clip   dup 0 = if
    2drop refill   0 = ?abort" input? "   source   then
  rot ( a src-a src-n n ) 2dup <= if
    true newline !   drop   else   nip   then
  push swap peek   2dup chars + 0A swap c!   cmove
  pop   dup >in +! ;

100 constant size
label buffer   size allot
variable start   buffer start !
variable length   0 length !

: sync ( -- )   length @ >in -!   0 length ! ;

: discard ( n -- )   dup start +!   length -! ;

: expect ( n -- a m )
  dup size > ?abort" expect? "
  start @ buffer - over +   size > if
    start @ buffer length @ cmove   buffer start !   then
  begin   dup length @ > while   start @ length @ +
    size length @ -   accept   length +!   repeat
  drop start @ length @ ;

: >number ( a n -- a' n' m )
  0 push   begin   dup 0 > while   over c@
    dup 30 39 between if   30 - pop 16* + push   else
    dup 41 46 between if   37 - pop 16* + push   else
    dup 61 66 between if   57 - pop 16* + push   else
    drop pop exit   then then then   1 clip   repeat
  pop ;

: fold ( c -- c' )
  dup 61 7A between if   20 -   then
  dup 20 <= if   drop 20   then ;

: collate ( a1 a2 n -- f )
  push begin
    peek dup while drop   over c@ fold   over c@ fold   -
    dup 0 = while drop   swap 1 chars +   swap 1 chars +
    pop 1 - push   again then then
  lose nip nip ;

: folded, ( a n -- )
  begin   dup while   swap dup c@ fold c, 1 chars + swap 1 -
  repeat   2drop ;

' compile, constant \call,
' literal  constant \push,

( parser )

: scan-blanks ( a n -- a+m n-m )   begin   dup while
  over c@ 20 > while   1 clip   again then then ;

: skip-blanks ( a n -- a+m n-m )   begin   dup while
  over c@ 20 <= while   1 clip   again then then ;

: blanks ( -- )
  begin   1 expect   tuck skip-blanks nip -   dup discard
    0 = until ;

: name ( -- a n )
  0 push begin   peek 1 + expect   peek clip
    tuck scan-blanks nip -   dup pop + push   0 = until
  pop 1 + dup expect drop swap ;

( levels )

variable level   0 level !

defer perform ( v n -- | ... w 0 -- ... )
defer deposit ( m n -- | m 0 -- m )

:noname ( perform )
  dup if   1- stow deposit   \call, pop perform   else
  drop execute   then ; is perform

:noname ( deposit )
  dup if   1- stow deposit   \push, pop perform   else
  drop   then ; is deposit

( classes )

: >name ( lnk-a -- a n )
  1 cells -   dup @ tuck   chars - swap ;
: name> ( a n -- lnk-a )
  chars +   1 cells + ;

: >class ( lnk-a -- cls-a )   1 cells + ;
: class> ( cls-a -- lnk-a )   1 cells - ;

: >body ( lnk-a -- bod-a )   2 cells + ;
: body> ( bod-a -- lnk-a )   1 cells - ;

label delay   0 ,

: numeral-class ( a n lnk-a -- ... )
  over discard   drop >number   swap 1 <> ?abort" term? " nip
  delay @ deposit ;

0 , here dup , ' numeral-class ,   constant (numeral)

label latest   (numeral) ,

: define ( a n cls -- )
  tor   dup allot align dup negate allot   tuck folded, ,
  latest @   here latest !   , , ;

: constant-class ( ... a n lnk-a -- ... )
  nip nip   >body @   delay @   deposit ;

: :-class ( ... a n lnk-a -- ... )
  swap discard nip   >body @   delay @   perform ;

( interpreter )

: find ( a n -- a' n' lnk-a )
  latest @ push   begin
    2dup peek >name rot ( a a' n' n )   2dup > if   2drop 2drop
    else   drop collate 0 = if   peek >name nip clip pop exit
    then   then   pop @ push
  again ;

: [-class ( a n lnk-a -* )   drop discard drop   throw ;
s" [ " ' [-class define

: ;-class ( bod-a colon-sys a n lnk-a -- )
  drop discard drop   ] postpone ;   1 delay -!
  swap here -   tuck allot   ,   negate allot   throw ;
s" ; " ' ;-class define

: t ( "newname oldname" -- )
  blanks name tuck   ['] :-class define   discard   sync ' , ;

t drop drop   t dup dup   t nip nip   t swap swap   t over over
t tuck tuck   t rot rot   t tor tor
t push push   t pop pop   t lose lose   t stow stow
t peek peek
t + +   t - -   t * *   t / /
t = =   t <> <>   t < <   t >= >=   t > >   t <= <=
t @ @   t ! !   t +! +!   t -! -!
t . .

: constant ( n "name" -- ) ( -- n )
  blanks name tuck   ['] constant-class define   discard
  sync ;

: label ( "name" -- ) ( -- a )
  blanks name tuck   ['] constant-class define   discard
  here 1 cells + ,   sync ;

: variable ( "name" -- ) ( -- a )
  label   1 cells allot ;

: (]) ( -* )
  begin   blanks name find   dup >name nip discard
    dup >class @ execute   again ;

: ]   ['] (]) catch drop   sync ;

: : ( "name" -- )
  blanks name tuck   ['] :-class define   discard
  here ( bod-a ) 0 ,   1 delay +!   :noname postpone [ ] ;
