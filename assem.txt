Incompatible postfix assembler for the STM8
===========================================

This is a small Forth-style assembler for the STM8 architecture.
The operand order corresponds to the vendor documentation, with
two exceptions [Note J], but the mnemonics are sometimes changed
and the addressing modes are notated differently.  Operands of
instructions are encoded entirely on the stack, no state is
maintained between assembler words.  This assembler only
requires 16-bit host cells, but accordingly does not deal with
24-bit extended addresses.

Host interface
--------------

The assembler uses only four words from the host system to
inform it of the encoding process. These are WHERE to retrieve
the current encoding address, B, to encode a byte, and
optionally UB @ and B! to write a byte if forward branches are used.  The
latter two words   .  The
assembler will define a W, that follows the processor byte
order (big endian) and truncates as well.

Error checking
--------------

There is only limited error checking.  The assembler is free to
encode nonsense or crash if you give it arguments of the wrong
type [Arguments], but not otherwise.  Additionally, if you use
the unchecked addressing modes [Addressing modes], any
extraneous bits in an address or offset will be silently
discarded.  Extraneous bits in an immediate or a bit number are
always discarded.

Arguments
---------

Arguments to operations come in four types: operands, register
pairs, condition codes and bit numbers.



Addressing modes
----------------

The correspondence between vendor and Forth addressing modes is
completely regular.  The only apparent exception actually has to
do with instruction syntax: a bit number is considered a simple
number, not an immediate [Note B].  Also, because the STM8
instruction set encodes targets of absolute jumps and calls as
addresses, not immediates, the call syntax appears to have one
more indirection than it actually does.  A final limitation of
this assembler is that 24-bit extended addressing modes are not
supported, because this would require manipulating stack entries
of more than 16 bits.

Each addressing mode word creates an operand on the stack,
possibly consuming a cell in the process.  For modes that encode
memory addresses or offsets, there are always two versions: an
unchecked one that requires the size (`b` or `w`) to be
specified manually and a checked one that chooses the size
automatically.  Checked and unchecked variants are present even
for modes that only admit one size.  However, immediate values
are always unchecked, because the implied signedness of an
immediate depends on programmer intent.  (Note that a given
instruction only ever admits one immediate size.)

  Vendor                     Forth  Reference          Checked?
  ----------------  --------------  -----------------  --------
  #imm                       imm #  #      ( n -- o )  no
  rel                        rel &  &      ( a -- o )  yes
  shortmem             shortmem b)  b)     ( u -- o )  no
  longmem               longmem w)  w)     ( u -- o )  no
  mem                        mem )  )      ( u -- o )  yes
  (X)                           X)  X)     (   -- o )
  (shortoff,X)       shortoff b,X)  b,X)   ( n -- o )  no
  (longoff,X)         longoff w,X)  w,X)   ( n -- o )  no
  (off,X)                  off ,X)  ,X)    ( n -- o )  yes
  (Y)                           Y)  Y)     (   -- o )
  (shortoff,Y)       shortoff b,Y)  b,Y)   ( n -- o )  no
  (longoff,Y)         longoff w,Y)  w,Y)   ( n -- o )  no
  (off,Y)                  off ,Y)  ,Y)    ( n -- o )  yes
  (shortoff,SP)      shortoff b,S)  b,S)   ( n -- o )  no
  (off,SP)                 off ,S)  ,S)    ( n -- o )  yes
  [shortptr.w]        shortptr b))  b))    ( u -- o )  no
  [longptr.w]          longptr w))  w))    ( u -- o )  no
  [ptr.w]                   ptr ))  ))     ( u -- o )  yes
  ([shortptr.w],X)  shortptr b),X)  b),X)  ( u -- o )  no
  ([longptr.w],X)    longptr w),X)  w),X)  ( u -- o )  no
  ([ptr.w],X)             ptr ),X)  ),X)   ( u -- o )  yes
  ([shortptr.w],Y)  shortptr b),Y)  b),Y)  ( u -- o )  no
  ([ptr.w],Y)             ptr ),Y)  ),Y)   ( u -- o )  yes
  ----------------  --------------  -----------------  --------

Condition codes
---------------

The condition codes are completely renamed in line with the ARM.
This is simply my personal preference. The correspondence is:

  Vendor  Forth  Meaning
  ------  -----  -------
  C          CS  carry set
  EQ         EQ  equal
  F          NV  never
  MI         MI  minus
  NC         CC  carry clear
  NE         NE  not equal
  NV         VC  overflow clear
  PL         PL  plus
  SGE        GE  greater or equal \  (signed)
  SGT        GT  greater than     |
  SLE        LE  less or equal    |
  SLT        LT  less than        /
  T          AL  always
  UGE        HS  higher or same   \  (unsigned)
  UGT        HI  higher           |
  ULE        LS  lower or same    |
  ULT        LO  lower            /
  V          VS  overflow set

Instructions
------------

[Note 3]
    The mnemonics of BREAK, CALL, CP, DIVW, HALT, IRET, JP, OR,
    PUSH, RLWA, RRWA, SWAP, and TRAP are adjusted to three
    characters.

[Note A]
    The binary instructions (ADC, ADD, AND, BCP, CMP,
    ORR [Note 3], SBC, SUB, XOR) are written without the
    destination argument, which is always A.

[Note B]
    The bit modification (CCM, CPL, RES, SET) and test (TJF,
    TJT) instructions have the starting B in the mnemonic
    removed.  The vendor CPL is therefore renamed to NOT.
    Additionally, the bit number is written as a simple numeric
    argument and not an immediate operand.

[Note C]
    The conditional jumps (JRxx) are written with a single
    mnemonc ?JR and a condition code on the stack.

[Note J]
    The bit test operations TJF and TJT [Note B] use a different
    operand order that more closely matches their encodings.

[Note L]
    The all-purpose instructions LD and LDW are split into
    several mnemonics due to their highly irregular encodings.
    Transfers between registers are denoted by TFR, loads
    from A, X, and Y by respectively LDA, LDX, and LDY, stores
    by STA, STX, and STY.  For the same reason, the wide
    arithmetic operations ADDW, CPW, DIV, MUL, and SUBW are
    split into ADX, ADY, ADS; CPX, CPY; DVX, DVY; MLX, MLY;
    and SBX, SBY.  See, however, [Note W].

[Note M]
    The operand of absolute JMP and CAL appears to have one more
    indirection than it actually does.  See [Addressing modes].

[Note R]
    Relative jumps and calls are encoded using respectively JMP
    and CAL with the relative addressing mode &.  This mode also
    has to be used with the relative conditional jumps ?JR, TJF
    and TJT.

[Note U]
    The word versions of the unary ALU operations (CLR, DEC,
    INC, NEG, NOT, RLC, RRC, SLA, SLL, SRA, SRL, SWP, TNZ) as
    well as the stack operations (POP and PSH) use the same
    mnemonics as the byte ones, but with the operand being X
    or Y.  Note in particular that the byte and word versions
    of SWP do different things.   Additionally, EXGW is written
    as EXG applied to the register pair X,Y.

[Note W]
    Operations, modes and pairs that mention X or Y by name
    can also be written with I in their place and X or Y passed
    on the top of the stack.  This applies to ADI, CPI, LDI,
    RLI, RRI, SBI, STI; I), ),I), etc.; A,IL, S,I, etc.  Note
    that this effectively switches the order of arguments to
    all the operations except LDI.

The complete operation syntax correspondence is as follows:

  Vendor                          Forth  [3ABCJLMRUW]
  -------------------  ----------------  ------------
  ADC A, src                   src ADC,  [ A        ]
  ADD A, src                   src ADD,  [ A        ]
  ADDW S, src                  src ADS,  [     L    ]
  ADDW X, src                  src ADX,  [     L   W]
  ADDW Y, src                  src ADY,  [     L   W]
  AND A, src                   src AND,  [ A        ]
  BCCM dst, #pos           dst pos CCM,  [  B       ]
  BCP A, src                   src BCP,  [ A        ]
  BCPL dst, #pos           dst pos CPL,  [  B       ]
  BREAK                            BRK,  [3         ]
  BRES dst, #pos           dst pos RES,  [  B       ]
  BSET dst, #pos           dst pos SET,  [  B       ]
  BTJF dst, #pos, rel  rel dst pos TJF,  [  B J  R  ]
  BTJT dst, #pos, rel  rel dst pos TJT,  [  B J  R  ]
  CALL dst                     dst CAL,  [3     M   ]
  CALLF dst                        ---
  CALLR dst                    dst CAL,  [       R  ]
  CCF                              CCF,  [          ]
  CLR dst                      dst CLR,  [          ]
  CLRW dst                     dst CLR,  [        U ]
  CP A, src                    src CMP,  [3A        ]
  CPW X, src                   src CPX,  [     L   W]
  CPW Y, src                   src CPY,  [     L   W]
  CPL dst                      dst NOT,  [  B       ]
  CPLW dst                     dst NOT,  [  B     U ]
  DEC dst                      dst DEC,  [          ]
  DECW dst                     dst DEC,  [        U ]
  DIV X, A                         DVX,  [     L    ]
  DIV Y, A                         DVY,  [     L    ]
  DIVW X, Y                        DIV,  [3         ]
  EXG dst,src              dst,src EXG,  [          ]  ???
  EXGW dst,src             dst,src EXG,  [        U ]
  HALT                             HLT,  [3         ]
  INC dst                      dst INC,  [          ]
  INCW dst                     dst INC,  [        U ]
  INT dst                          ---
  IRET                             IRT,  [3         ]
  JP dst                       dst JMP,  [3     M   ]
  JPF dst                          ---
  JRA dst                      dst JMP,  [       R  ]
  JRxx dst                  dst cc ?JR,  [   C      ]
  LD reg, reg              reg,reg TFR,  [     L    ]
  LD A, src                    src LDA,  [     L    ]
  LD dst, A                    dst STA,  [     L    ]
  LDW reg, reg             reg,reg TFR,  [     L    ]
  LDW X, src                   src LDX,  [     L   W]
  LDW dst, X                   dst STX,  [     L   W]
  LDW Y, src                   src LDY,  [     L   W]
  LDW dst, Y                   dst STY,  [     L   W]
  MOV dst, src             dst src MOV,  [          ]
  MUL X, A                         MLX,  [     L   W]
  MUL Y, A                         MLY,  [     L   W]
  NEG dst                      dst NEG,  [          ]
  NEGW dst                     dst NEG,  [        U ]
  NOP                              NOP,  [          ]
  OR A, src                    src ORR,  [3A        ]
  POP dst                      dst POP,  [          ]
  POPW dst                     dst POP,  [        U ]
  PUSH src                     src PSH,  [3       U ]
  PUSHW src                    src PSH,  [3       U ]
  RCF                              RCF,  [          ]
  RET                              RET,  [          ]
  RETF                             ---
  RLC dst                      dst RLC,  [          ]
  RLCW dst                     dst RLC,  [        U ]
  RLWA dst                     dst RLA,  [3         ]
  RRC dst                      dst RRC,  [          ]
  RRCW dst                     dst RRC,  [        U ]
  RRWA dst                     dst RRA,  [3         ]
  RVF                              RVF,  [          ]
  SBC A, src                   src SBC,  [ A        ]
  SCF                              SCF,  [          ]
  SIM                              SIM,  [          ]
  SLA dst                      dst SLA,  [          ]
  SLAW dst                     dst SLA,  [        U ]
  SLL dst                      dst SLL,  [          ]
  SLLW dst                     dst SLL,  [        U ]
  SRA dst                      dst SRA,  [          ]
  SRAW dst                     dst SRA,  [        U ]
  SRL dst                      dst SRL,  [          ]
  SRLW dst                     dst SRL,  [        U ]
  SUB A, src                   src SUB,  [ A        ]
  SUBW X, src                  src SBX,  [     L   W]
  SUBW Y, src                  src SBY,  [     L   W]
  SWAP dst                     dst SWP,  [3         ]
  SWAPW dst                    dst SWP,  [3       U ]
  TNZ dst                      dst TNZ,  [          ]
  TNZW dst                     dst TNZ,  [        U ]
  TRAP                             TRP,  [3         ]
  WFE                              WFE,  [          ]
  WFI                              WFI,  [          ]
  XOR A, src                   src XOR,  [ A        ]

Control flow
------------

As usual for Forth assemblers, no forward labels can be defined,
but there are both unstructured and structured words for
managing control flow using the stack.

The low-level words are:

&               a -- o                                "relative"
    Turn the absolute address on the stack into an operand for
    a relative jump or call instruction.  An error is raised
    during instruction encoding if the signed difference between
   `a` and the end of the instruction does not fit in a byte.

RETURN          -- dest
    Leave the current encoding address.  A synonym of `HERE` to
    be used together with `BACKWARD`.

BACKWARD        dest -- o
    Turn the absolute address `dest` into an operand for a
    relative jump or call.  A synonym of `&` to be used together
    with `RETURN`

FORWARD         -- orig o
    Leave a fictious operand `o` that can be used to encode a
    forward jump or call instruction, and a token `orig` that
    can later be passed to `RESOLVE` to set its target.  The
    encoded instruction is unspecified until the target is set.
   (In the current implementation, it encodes an infinite loop.)

RESOLVE         orig --
    Resolve a forward jump previously encoded using `FORWARD`.

The high-level words correspond to Forth control structures, but
take condition codes instead of a boolean argument:

BEGIN,          -- dest                            "begin-comma"

AGAIN,          dest --                            "again-comma"

UNTIL,          dest cc --                         "until-comma"

IF,             cc -- orig                            "if-comma"

ELSE,           orig -- orig                        "else-comma"

THEN,           orig --                             "then-comma"

WHILE,          cc dest -- orig dest               "while-comma"

REPEAT,         orig dest --                      "repeat-comma"

