s" shim.ans" included   hex

variable \stack
: stack    \stack @ ;
: change   \stack @ 1 cells + ;
: get      \stack @ 2 cells + ;
: put      \stack @ 3 cells + ;

label rstack   72 , 3 cells allot   : R:   rstack \stack ! ;
label dstack   64 , 3 cells allot   : D:   dstack \stack ! ;

variable pops   label pushing   true ,

: clip ( a n m -- a+m n-m )   tuck - tor + swap ;

: string, ( a n -- )
  begin   dup while   over c@ c,   1 clip repeat   2drop ;

: word_t ( "name" -- )
  >in @ push   create   pop >in !   parse-name   dup , string,
;does:
  dup 1 cells + swap @ ( a n )
  pushing @ if
    stack @ emit ." psh = " type ." ; "
      change @ 1 + dup change !   put @ max put !   else
    stack @ tor   1 pops +!
      change @ 1 - dup change !   get @ min get !   then ;

: | ( ... -- )
  pushing @ if
    false pushing !   0 pops !   D:   else
    true pushing !   begin   pops @ while
      type ."  = " emit ." pop; "   1 pops -!   repeat
    then ;

variable code

: prim ( -- )
  R: 0 change ! 0 get ! 0 put !   D: 0 change ! 0 get ! 0 put !
  ." PRIM( 0x" code @ dup . 1 + code ! ." , "
  22 emit parse-name type 22 emit ." , { " ;

: next ( -- )
  ." } , { "
  R: get @ if   ." rget( " get @ negate . ." ); "   then
     put @ if   ." rput( " put @ . ." ); "   then
  D: get @ if   ." dget( " get @ negate . ." ); "   then
     put @ if   ." dput( " put @ . ." ); "   then
  ." } )" cr ;

: {   7D parse type ;

word_t x   word_t y   word_t z   word_t iptr

prim ABORT   { goto abort; } next
prim HALT    { goto halt; } next
prim EXIT    | R: iptr | next
prim EXECUTE R: iptr | iptr | next

prim @RP { x = rptr; } x next
prim @RB { x = rbot; } x next
prim @RT { x = rtop; } x next
prim !RP | x | { rptr = x; rchk; } next
prim !RB | x | { rbot = x; rchk; } next
prim !RT | x | { rtop = x; rchk; } next

prim @DP { x = dptr; } x next
prim @DB { x = dbot; } x next
prim @DT { x = dtop; } x next
prim !DP | x | { dptr = x; dchk; } next
prim !DB | x | { dbot = x; dchk; } next
prim !DT | x | { dtop = x; dchk; } next

prim DROP | x | next
prim DUP  | x | x x next
prim NIP  | x y | y next
prim SWAP | x y | y x next
prim OVER | x y | x y x next
prim TUCK | x y | y x y next
prim ROT  | x y z | y z x next
prim TOR  | x y z | z x y next

bye
